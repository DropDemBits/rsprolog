//! Syntax constructs
use num_traits::{FromPrimitive, ToPrimitive};
use rowan::Language;
use toc_scanner::Token;

/// Syntax tokens present
#[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, FromPrimitive, ToPrimitive)]
pub enum SyntaxKind {
    // Character Tokens
    At,
    Arrow,
    Caret,
    Colon,
    Assign,
    Comma,
    Range,
    Dot,
    Equ,
    GreaterEqu,
    Greater,
    Pound,
    Imply,
    LessEqu,
    LeftParen,
    Less,
    Minus,
    Plus,
    RightParen,
    Semicolon,
    Slash,
    Star,
    Exp,
    Tilde,

    // Keywords
    KwAddressint,
    KwAll,
    KwAnd,
    KwArray,
    KwAsm,
    KwAssert,
    KwBegin,
    KwBind,
    KwBits,
    KwBody,
    KwBoolean,
    KwBreak,
    KwBy,
    KwCase,
    KwChar,
    KwCheat,
    KwChecked,
    KwClass,
    KwClose,
    KwCollection,
    KwCondition,
    KwConst,
    KwDecreasing,
    KwDef,
    KwDeferred,
    KwDiv,
    KwElif,
    KwElse,
    KwElseif,
    KwElsif,
    KwEnd,
    KwEndCase,
    KwEndFor,
    KwEndIf,
    KwEndLoop,
    KwEnum,
    KwExit,
    KwExport,
    KwExternal,
    KwFalse,
    KwFlexible,
    KwFor,
    KwFork,
    KwForward,
    KwFree,
    KwFunction,
    KwGet,
    KwHandler,
    KwIf,
    KwImplement,
    KwImport,
    KwIn,
    KwInclude,
    KwInherit,
    KwInit,
    KwInt,
    KwInt1,
    KwInt2,
    KwInt4,
    KwInvariant,
    KwLabel,
    KwLoop,
    KwMod,
    KwModule,
    KwMonitor,
    KwNat,
    KwNat1,
    KwNat2,
    KwNat4,
    KwNew,
    KwNil,
    KwNot,
    KwObjectClass,
    KwOf,
    KwOpaque,
    KwOpen,
    KwOr,
    KwPacked,
    KwPause,
    KwPervasive,
    KwPointer,
    KwPost,
    KwPre,
    KwPriority,
    KwProcedure,
    KwProcess,
    KwPut,
    KwQuit,
    KwRead,
    KwReal,
    KwReal4,
    KwReal8,
    KwRecord,
    KwRegister,
    KwRem,
    KwResult,
    KwReturn,
    KwSeek,
    KwSelf,
    KwSet,
    KwShl,
    KwShr,
    KwSignal,
    KwSkip,
    KwString,
    KwTag,
    KwTell,
    KwThen,
    KwTimeout,
    KwTo,
    KwTrue,
    KwType,
    KwUnchecked,
    KwUnion,
    KwUnit,
    KwUnqualified,
    KwVar,
    KwWait,
    KwWhen,
    KwWrite,
    KwXor,

    // Literals
    /// Normal integer literal
    IntLiteral,
    /// Real Literal
    RealLiteral,
    /// Integer with custom radix base
    RadixLiteral,
    /// Character literal
    CharLiteral,
    /// String literal
    StringLiteral,
    /// Identifier
    Identifier,

    /// Whitespace (including newlines)
    Whitespace,
    /// Comments (both block & line comments)
    Comment,

    // Composite & Misc Syntax Tokens //
    /// Error tokens produced by the scanner
    Error,
    /// Root node
    Root,
    /// "not in" composite token (`"not" "whitespace" "in"`)
    NotIn,
    /// "not=" composite token (`"not" "whitespace" "eq"`)
    NotEq,

    // Generated from 'turing.ungram'
    Name,
    NameList,
    NameRef,
    FieldRef,
    IndirectRef,
    BitsRef,
    SelectorRef,
    BitRange,
    RangeSpec,
    ParamList,
    ConstVarDecl,
    TypeDecl,
    BindDecl,
    ProcDecl,
    FcnDecl,
    ProcessDecl,
    ForwardDecl,
    DeferredDecl,
    ModuleDecl,
    ClassDecl,
    MonitorDecl,
    IncludeStmt,
    ImportStmt,
    AsnStmt,
    OpenStmt,
    CloseStmt,
    PutStmt,
    GetStmt,
    ReadStmt,
    WriteStmt,
    SeekStmt,
    TellStmt,
    ForStmt,
    LoopStmt,
    ExitStmt,
    IfStmt,
    CaseStmt,
    InnerStmt,
    InvariantStmt,
    AssertStmt,
    CallStmt,
    ReturnStmt,
    ResultStmt,
    NewStmt,
    FreeStmt,
    TagStmt,
    ForkStmt,
    SignalStmt,
    PauseStmt,
    QuitStmt,
    CheckednessStmt,
    BlockStmt,
    DeclAs,
    BindItem,
    ProcHeader,
    SubprogBody,
    ParamSpec,
    FcnHeader,
    PreStmt,
    InitStmt,
    PostStmt,
    ExceptionHandler,
    SubprogHeader,
    InitVar,
    BodyDecl,
    ModuleBody,
    InheritStmt,
    ImplementStmt,
    ImplementByStmt,
    ExportStmt,
    ImportItem,
    ImportAttr,
    ExternalItem,
    ExportItem,
    ExportAttr,
    CompoundOp,
    OpenKind,
    OldOpen,
    NewOpen,
    OpenMode,
    IoCap,
    CloseKind,
    OldClose,
    NewClose,
    StreamNum,
    PutItem,
    PutOpt,
    GetItem,
    GetWidth,
    BinaryIO,
    BinaryItem,
    RequestSize,
    ActualSize,
    IfHead,
    ElseStmt,
    ElseifStmt,
    CaseArm,
    CallExpr,
    WaitStmt,
    QuitCause,
    AtCaller,
    BubbleUp,
    Checkedness,
    ExplicitConstant,
    InitExpr,
    BinaryExpr,
    UnaryExpr,
    ParenExpr,
    RefExpr,
    Param,
    PrimType,
    NameType,
    RangeItem,
    RangeBound,
    RangeType,
    EnumType,
    ArrayType,
    SetType,
    RecordType,
    UnionType,
    PointerType,
    SubprogType,
    CollectionType,
    ConditionType,
    SizedCharType,
    SizedStringType,
    SeqLength,
    RecordField,
    UnionVariants,
    FcnType,
    ProcType,
    ParamDecl,
    ConstVarParam,
    SubprogParam,
    ConditionKind,
}

impl From<Token> for SyntaxKind {
    fn from(token: Token) -> Self {
        use toc_scanner::NumberKind;

        match token {
            Token::At => SyntaxKind::At,
            Token::Arrow => SyntaxKind::Arrow,
            Token::Caret => SyntaxKind::Caret,
            Token::Colon => SyntaxKind::Colon,
            Token::Assign => SyntaxKind::Assign,
            Token::Comma => SyntaxKind::Comma,
            Token::Range => SyntaxKind::Range,
            Token::Dot => SyntaxKind::Dot,
            Token::Equ => SyntaxKind::Equ,
            Token::GreaterEqu => SyntaxKind::GreaterEqu,
            Token::Greater => SyntaxKind::Greater,
            Token::Pound => SyntaxKind::Pound,
            Token::Imply => SyntaxKind::Imply,
            Token::LessEqu => SyntaxKind::LessEqu,
            Token::LeftParen => SyntaxKind::LeftParen,
            Token::Less => SyntaxKind::Less,
            Token::Minus => SyntaxKind::Minus,
            Token::Plus => SyntaxKind::Plus,
            Token::RightParen => SyntaxKind::RightParen,
            Token::Semicolon => SyntaxKind::Semicolon,
            Token::Slash => SyntaxKind::Slash,
            Token::Star => SyntaxKind::Star,
            Token::Exp => SyntaxKind::Exp,
            Token::Tilde => SyntaxKind::Tilde,
            Token::Addressint => SyntaxKind::KwAddressint,
            Token::All => SyntaxKind::KwAll,
            Token::And => SyntaxKind::KwAnd,
            Token::Array => SyntaxKind::KwArray,
            Token::Asm => SyntaxKind::KwAsm,
            Token::Assert => SyntaxKind::KwAssert,
            Token::Begin => SyntaxKind::KwBegin,
            Token::Bind => SyntaxKind::KwBind,
            Token::Bits => SyntaxKind::KwBits,
            Token::Body => SyntaxKind::KwBody,
            Token::Boolean => SyntaxKind::KwBoolean,
            Token::Break => SyntaxKind::KwBreak,
            Token::By => SyntaxKind::KwBy,
            Token::Case => SyntaxKind::KwCase,
            Token::Char => SyntaxKind::KwChar,
            Token::Cheat => SyntaxKind::KwCheat,
            Token::Checked => SyntaxKind::KwChecked,
            Token::Class => SyntaxKind::KwClass,
            Token::Close => SyntaxKind::KwClose,
            Token::Collection => SyntaxKind::KwCollection,
            Token::Condition => SyntaxKind::KwCondition,
            Token::Const => SyntaxKind::KwConst,
            Token::Decreasing => SyntaxKind::KwDecreasing,
            Token::Def => SyntaxKind::KwDef,
            Token::Deferred => SyntaxKind::KwDeferred,
            Token::Div => SyntaxKind::KwDiv,
            Token::Elif => SyntaxKind::KwElif,
            Token::Else => SyntaxKind::KwElse,
            Token::Elseif => SyntaxKind::KwElseif,
            Token::Elsif => SyntaxKind::KwElsif,
            Token::End => SyntaxKind::KwEnd,
            Token::EndCase => SyntaxKind::KwEndCase,
            Token::EndFor => SyntaxKind::KwEndFor,
            Token::EndIf => SyntaxKind::KwEndIf,
            Token::EndLoop => SyntaxKind::KwEndLoop,
            Token::Enum => SyntaxKind::KwEnum,
            Token::Exit => SyntaxKind::KwExit,
            Token::Export => SyntaxKind::KwExport,
            Token::External => SyntaxKind::KwExternal,
            Token::False => SyntaxKind::KwFalse,
            Token::Flexible => SyntaxKind::KwFlexible,
            Token::For => SyntaxKind::KwFor,
            Token::Fork => SyntaxKind::KwFork,
            Token::Forward => SyntaxKind::KwForward,
            Token::Free => SyntaxKind::KwFree,
            Token::Function => SyntaxKind::KwFunction,
            Token::Get => SyntaxKind::KwGet,
            Token::Handler => SyntaxKind::KwHandler,
            Token::If => SyntaxKind::KwIf,
            Token::Implement => SyntaxKind::KwImplement,
            Token::Import => SyntaxKind::KwImport,
            Token::In => SyntaxKind::KwIn,
            Token::Include => SyntaxKind::KwInclude,
            Token::Inherit => SyntaxKind::KwInherit,
            Token::Init => SyntaxKind::KwInit,
            Token::Int => SyntaxKind::KwInt,
            Token::Int1 => SyntaxKind::KwInt1,
            Token::Int2 => SyntaxKind::KwInt2,
            Token::Int4 => SyntaxKind::KwInt4,
            Token::Invariant => SyntaxKind::KwInvariant,
            Token::Label => SyntaxKind::KwLabel,
            Token::Loop => SyntaxKind::KwLoop,
            Token::Mod => SyntaxKind::KwMod,
            Token::Module => SyntaxKind::KwModule,
            Token::Monitor => SyntaxKind::KwMonitor,
            Token::Nat => SyntaxKind::KwNat,
            Token::Nat1 => SyntaxKind::KwNat1,
            Token::Nat2 => SyntaxKind::KwNat2,
            Token::Nat4 => SyntaxKind::KwNat4,
            Token::New => SyntaxKind::KwNew,
            Token::Nil => SyntaxKind::KwNil,
            Token::Not => SyntaxKind::KwNot,
            Token::ObjectClass => SyntaxKind::KwObjectClass,
            Token::Of => SyntaxKind::KwOf,
            Token::Opaque => SyntaxKind::KwOpaque,
            Token::Open => SyntaxKind::KwOpen,
            Token::Or => SyntaxKind::KwOr,
            Token::Packed => SyntaxKind::KwPacked,
            Token::Pause => SyntaxKind::KwPause,
            Token::Pervasive => SyntaxKind::KwPervasive,
            Token::Pointer => SyntaxKind::KwPointer,
            Token::Post => SyntaxKind::KwPost,
            Token::Pre => SyntaxKind::KwPre,
            Token::Priority => SyntaxKind::KwPriority,
            Token::Procedure => SyntaxKind::KwProcedure,
            Token::Process => SyntaxKind::KwProcess,
            Token::Put => SyntaxKind::KwPut,
            Token::Quit => SyntaxKind::KwQuit,
            Token::Read => SyntaxKind::KwRead,
            Token::Real => SyntaxKind::KwReal,
            Token::Real4 => SyntaxKind::KwReal4,
            Token::Real8 => SyntaxKind::KwReal8,
            Token::Record => SyntaxKind::KwRecord,
            Token::Register => SyntaxKind::KwRegister,
            Token::Rem => SyntaxKind::KwRem,
            Token::Result_ => SyntaxKind::KwResult,
            Token::Return => SyntaxKind::KwReturn,
            Token::Seek => SyntaxKind::KwSeek,
            Token::Self_ => SyntaxKind::KwSelf,
            Token::Set => SyntaxKind::KwSet,
            Token::Shl => SyntaxKind::KwShl,
            Token::Shr => SyntaxKind::KwShr,
            Token::Signal => SyntaxKind::KwSignal,
            Token::Skip => SyntaxKind::KwSkip,
            Token::String_ => SyntaxKind::KwString,
            Token::Tag => SyntaxKind::KwTag,
            Token::Tell => SyntaxKind::KwTell,
            Token::Then => SyntaxKind::KwThen,
            Token::Timeout => SyntaxKind::KwTimeout,
            Token::To => SyntaxKind::KwTo,
            Token::True => SyntaxKind::KwTrue,
            Token::Type => SyntaxKind::KwType,
            Token::Unchecked => SyntaxKind::KwUnchecked,
            Token::Union => SyntaxKind::KwUnion,
            Token::Unit => SyntaxKind::KwUnit,
            Token::Unqualified => SyntaxKind::KwUnqualified,
            Token::Var => SyntaxKind::KwVar,
            Token::Wait => SyntaxKind::KwWait,
            Token::When => SyntaxKind::KwWhen,
            Token::Write => SyntaxKind::KwWrite,
            Token::Xor => SyntaxKind::KwXor,
            Token::Identifier => SyntaxKind::Identifier,
            Token::CharLiteral => SyntaxKind::CharLiteral,
            Token::StringLiteral => SyntaxKind::StringLiteral,
            Token::NumberLiteral(NumberKind::Int) => SyntaxKind::IntLiteral,
            Token::NumberLiteral(NumberKind::Real) => SyntaxKind::RealLiteral,
            Token::NumberLiteral(NumberKind::Radix) => SyntaxKind::RadixLiteral,
            Token::Whitespace => SyntaxKind::Whitespace,
            Token::Comment => SyntaxKind::Comment,
            Token::Error => SyntaxKind::Error,
        }
    }
}

impl From<SyntaxKind> for rowan::SyntaxKind {
    fn from(kind: SyntaxKind) -> Self {
        Self(kind.to_u16().unwrap())
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum Lang {}
impl Language for Lang {
    type Kind = SyntaxKind;

    fn kind_from_raw(raw: rowan::SyntaxKind) -> Self::Kind {
        SyntaxKind::from_u16(raw.0).unwrap()
    }

    fn kind_to_raw(kind: Self::Kind) -> rowan::SyntaxKind {
        kind.into()
    }
}

// Re-export things requiring Lang
pub type SyntaxNode = rowan::SyntaxNode<Lang>;
#[allow(unused)]
pub type SyntaxToken = rowan::SyntaxToken<Lang>;
#[allow(unused)]
pub type SyntaxElement = rowan::NodeOrToken<SyntaxNode, SyntaxToken>;
