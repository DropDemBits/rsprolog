//! Expression testing
use crate::check;
use expect_test::expect;

#[test]
fn parse_ident_use() {
    check(
        "_:=a",
        expect![[r#"
            Root@0..4
              AssignStmt@0..4
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                NameExpr@3..4
                  Name@3..4
                    Identifier@3..4 "a""#]],
    );
    check(
        "_:=abcde0123",
        expect![[r#"
            Root@0..12
              AssignStmt@0..12
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                NameExpr@3..12
                  Name@3..12
                    Identifier@3..12 "abcde0123""#]],
    );
}

#[test]
fn parse_int_literal() {
    check(
        "_:=01234560",
        expect![[r#"
            Root@0..11
              AssignStmt@0..11
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..11
                  IntLiteral@3..11 "01234560""#]],
    );

    // TODO: Report invalid literals

    // Overflow, should be detected (in the future)
    check(
        "_:=99999999999999999999",
        expect![[r#"
            Root@0..23
              AssignStmt@0..23
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..23
                  IntLiteral@3..23 "99999999999999999999""#]],
    );

    // Digit cutoff
    check(
        "_:=999a999",
        expect![[r#"
            Root@0..10
              AssignStmt@0..6
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..6
                  IntLiteral@3..6 "999"
              CallStmt@6..10
                NameExpr@6..10
                  Name@6..10
                    Identifier@6..10 "a999""#]],
    );
}

#[test]
fn parse_radix_literal() {
    // Examples
    check(
        "_:=16#EABC",
        expect![[r##"
            Root@0..10
              AssignStmt@0..10
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..10
                  RadixLiteral@3..10 "16#EABC""##]],
    );
    check(
        "_:=02#1100",
        expect![[r##"
            Root@0..10
              AssignStmt@0..10
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..10
                  RadixLiteral@3..10 "02#1100""##]],
    );

    // Errors

    // Overflow
    check(
        "_:=10#99999999999999999999",
        expect![[r##"
            Root@0..26
              AssignStmt@0..26
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..26
                  RadixLiteral@3..26 "10#99999999999999999999""##]],
    );

    // All errors below here should be reported here
    // TODO: Report invalid literals

    // No digits
    check(
        "_:=30#",
        expect![[r##"
            Root@0..6
              AssignStmt@0..6
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..6
                  RadixLiteral@3..6 "30#""##]],
    );

    // Out of range (> 36)
    check(
        "_:=37#asda",
        expect![[r##"
            Root@0..10
              AssignStmt@0..10
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..10
                  RadixLiteral@3..10 "37#asda""##]],
    );

    // Out of range (< 2)
    check(
        "_:=0#0000",
        expect![[r##"
            Root@0..9
              AssignStmt@0..9
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..9
                  RadixLiteral@3..9 "0#0000""##]],
    );
    check(
        "_:=1#0000",
        expect![[r##"
            Root@0..9
              AssignStmt@0..9
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..9
                  RadixLiteral@3..9 "1#0000""##]],
    );

    // Out of range (= overflow)
    check(
        "_:=18446744073709551616#0000",
        expect![[r##"
            Root@0..28
              AssignStmt@0..28
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..28
                  RadixLiteral@3..28 "18446744073709551616# ...""##]],
    );

    // Invalid digit
    check(
        "_:=10#999a999",
        expect![[r##"
            Root@0..13
              AssignStmt@0..13
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..13
                  RadixLiteral@3..13 "10#999a999""##]],
    );
}

#[test]
fn parse_real_literal() {
    // Leading dot
    check(
        "_:=.12345",
        expect![[r#"
            Root@0..9
              AssignStmt@0..9
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..9
                  RealLiteral@3..9 ".12345""#]],
    );
    check(
        "_:=.12345.6789",
        expect![[r#"
            Root@0..14
              AssignStmt@0..9
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..9
                  RealLiteral@3..9 ".12345"
              Error@9..14
                RealLiteral@9..14 ".6789"
            error at 9..14: expected ’var’, ’const’, ’type’, identifier, ’^’ or ’bits’, but found real literal"#]],
    );

    // Valid variations
    check(
        "_:=1.",
        expect![[r#"
            Root@0..5
              AssignStmt@0..5
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..5
                  RealLiteral@3..5 "1.""#]],
    );
    check(
        "_:=100.00",
        expect![[r#"
            Root@0..9
              AssignStmt@0..9
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..9
                  RealLiteral@3..9 "100.00""#]],
    );
    check(
        "_:=100.00e10",
        expect![[r#"
            Root@0..12
              AssignStmt@0..12
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..12
                  RealLiteral@3..12 "100.00e10""#]],
    );
    check(
        "_:=100.00e100",
        expect![[r#"
            Root@0..13
              AssignStmt@0..13
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..13
                  RealLiteral@3..13 "100.00e100""#]],
    );

    // Negative and positive exponents are valid
    check(
        "_:=100.00e-100",
        expect![[r#"
            Root@0..14
              AssignStmt@0..14
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..14
                  RealLiteral@3..14 "100.00e-100""#]],
    );
    check(
        "_:=100.00e+100",
        expect![[r#"
            Root@0..14
              AssignStmt@0..14
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..14
                  RealLiteral@3..14 "100.00e+100""#]],
    );
    check(
        "_:=1e100",
        expect![[r#"
            Root@0..8
              AssignStmt@0..8
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..8
                  RealLiteral@3..8 "1e100""#]],
    );

    // Errors:

    // Invalid format
    check(
        "_:=1e+",
        expect![[r#"
            Root@0..6
              AssignStmt@0..6
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..6
                  RealLiteral@3..6 "1e+""#]],
    );
    check(
        "_:=1e-",
        expect![[r#"
            Root@0..6
              AssignStmt@0..6
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..6
                  RealLiteral@3..6 "1e-""#]],
    );
    check(
        "_:=1e",
        expect![[r#"
            Root@0..5
              AssignStmt@0..5
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..5
                  RealLiteral@3..5 "1e""#]],
    );

    // Too big
    check(
        "_:=1e600",
        expect![[r#"
            Root@0..8
              AssignStmt@0..8
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..8
                  RealLiteral@3..8 "1e600""#]],
    );
}

#[test]
fn parse_real_literal_complex_conversions() {
    // Test conversions (all should be valid)

    check("_:=2.225073858507201136057409796709131975934819546351645648023426109724822222021076945516529523908135087914149158913039621106870086438694594645527657207407820621743379988141063267329253552286881372149012981122451451889849057222307285255133155755015914397476397983411801999323962548289017107081850690630666655994938275772572015763062690663332647565300009245888316433037779791869612049497390377829704905051080609940730262937128958950003583799967207254304360284078895771796150945516748243471030702609144621572289880258182545180325707018860872113128079512233426288368622321503775666622503982534335974568884423900265498198385487948292206894721689831099698365846814022854243330660339850886445804001034933970427567186443383770486037861622771738545623065874679014086723327636718749999999999999999999999999999999999999e-308", expect![[r#"
        Root@0..814
          AssignStmt@0..814
            NameExpr@0..1
              Name@0..1
                Identifier@0..1 "_"
            AsnOp@1..3
              Assign@1..3 ":="
            LiteralExpr@3..814
              RealLiteral@3..814 "2.2250738585072011360 ...""#]]);
    check("_:=2.22507385850720113605740979670913197593481954635164564802342610972482222202107694551652952390813508791414915891303962110687008643869459464552765720740782062174337998814106326732925355228688137214901298112245145188984905722230728525513315575501591439747639798341180199932396254828901710708185069063066665599493827577257201576306269066333264756530000924588831643303777979186961204949739037782970490505108060994073026293712895895000358379996720725430436028407889577179615094551674824347103070260914462157228988025818254518032570701886087211312807951223342628836862232150377566662250398253433597456888442390026549819838548794829220689472168983109969836584681402285424333066033985088644580400103493397042756718644338377048603786162277173854562306587467901408672332763671875e-308", expect![[r#"
        Root@0..777
          AssignStmt@0..777
            NameExpr@0..1
              Name@0..1
                Identifier@0..1 "_"
            AsnOp@1..3
              Assign@1..3 ":="
            LiteralExpr@3..777
              RealLiteral@3..777 "2.2250738585072011360 ...""#]]);
    check("_:=0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000222507385850720138309023271733240406421921598046233183055332741688720443481391819585428315901251102056406733973103581100515243416155346010885601238537771882113077799353200233047961014744258363607192156504694250373420837525080665061665815894872049117996859163964850063590877011830487479978088775374994945158045160505091539985658247081864511353793580499211598108576605199243335211435239014879569960959128889160299264151106346631339366347758651302937176204732563178148566435087212282863764204484681140761391147706280168985324411002416144742161856716615054015428508471675290190316132277889672970737312333408698898317506783884692609277397797285865965494109136909540613646756870239867831529068098461721092462539672851562500000000000000001", expect![[r#"
        Root@0..1044
          AssignStmt@0..1044
            NameExpr@0..1
              Name@0..1
                Identifier@0..1 "_"
            AsnOp@1..3
              Assign@1..3 ":="
            LiteralExpr@3..1044
              RealLiteral@3..1044 "0.0000000000000000000 ...""#]]);
    check("_:=179769313486231580793728971405303415079934132710037826936173778980444968292764750946649017977587207096330286416692887910946555547851940402630657488671505820681908902000708383676273854845817711531764475730270069855571366959622842914819860834936475292719074168444365510704342711559699508093042880177904174497791.9999999999999999999999999999999999999999999999999999999999999999999999", expect![[r#"
        Root@0..383
          AssignStmt@0..383
            NameExpr@0..1
              Name@0..1
                Identifier@0..1 "_"
            AsnOp@1..3
              Assign@1..3 ":="
            LiteralExpr@3..383
              RealLiteral@3..383 "179769313486231580793 ...""#]]);
    check(
        "_:=2.47032822920623272e-324",
        expect![[r#"
            Root@0..27
              AssignStmt@0..27
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..27
                  RealLiteral@3..27 "2.47032822920623272e-324""#]],
    );
    check("_:=6.631236871469758276785396630275967243399099947355303144249971758736286630139265439618068200788048744105960420552601852889715006376325666595539603330361800519107591783233358492337208057849499360899425128640718856616503093444922854759159988160304439909868291973931426625698663157749836252274523485312442358651207051292453083278116143932569727918709786004497872322193856150225415211997283078496319412124640111777216148110752815101775295719811974338451936095907419622417538473679495148632480391435931767981122396703443803335529756003353209830071832230689201383015598792184172909927924176339315507402234836120730914783168400715462440053817592702766213559042115986763819482654128770595766806872783349146967171293949598850675682115696218943412532098591327667236328125E-316", expect![[r#"
        Root@0..769
          AssignStmt@0..769
            NameExpr@0..1
              Name@0..1
                Identifier@0..1 "_"
            AsnOp@1..3
              Assign@1..3 ":="
            LiteralExpr@3..769
              RealLiteral@3..769 "6.6312368714697582767 ...""#]]);
    check("_:=3.237883913302901289588352412501532174863037669423108059901297049552301970670676565786835742587799557860615776559838283435514391084153169252689190564396459577394618038928365305143463955100356696665629202017331344031730044369360205258345803431471660032699580731300954848363975548690010751530018881758184174569652173110473696022749934638425380623369774736560008997404060967498028389191878963968575439222206416981462690113342524002724385941651051293552601421155333430225237291523843322331326138431477823591142408800030775170625915670728657003151953664260769822494937951845801530895238439819708403389937873241463484205608000027270531106827387907791444918534771598750162812548862768493201518991668028251730299953143924168545708663913273994694463908672332763671875E-319", expect![[r#"
        Root@0..766
          AssignStmt@0..766
            NameExpr@0..1
              Name@0..1
                Identifier@0..1 "_"
            AsnOp@1..3
              Assign@1..3 ":="
            LiteralExpr@3..766
              RealLiteral@3..766 "3.2378839133029012895 ...""#]]);
    check("_:=6.953355807847677105972805215521891690222119817145950754416205607980030131549636688806115726399441880065386399864028691275539539414652831584795668560082999889551357784961446896042113198284213107935110217162654939802416034676213829409720583759540476786936413816541621287843248433202369209916612249676005573022703244799714622116542188837770376022371172079559125853382801396219552418839469770514904192657627060319372847562301074140442660237844114174497210955449896389180395827191602886654488182452409583981389442783377001505462015745017848754574668342161759496661766020028752888783387074850773192997102997936619876226688096314989645766000479009083731736585750335262099860150896718774401964796827166283225641992040747894382698751809812609536720628966577351093292236328125E-310", expect![[r#"
        Root@0..775
          AssignStmt@0..775
            NameExpr@0..1
              Name@0..1
                Identifier@0..1 "_"
            AsnOp@1..3
              Assign@1..3 ":="
            LiteralExpr@3..775
              RealLiteral@3..775 "6.9533558078476771059 ...""#]]);
    check("_:=3.339068557571188581835713701280943911923401916998521771655656997328440314559615318168849149074662609099998113009465566426808170378434065722991659642619467706034884424989741080790766778456332168200464651593995817371782125010668346652995912233993254584461125868481633343674905074271064409763090708017856584019776878812425312008812326260363035474811532236853359905334625575404216060622858633280744301892470300555678734689978476870369853549413277156622170245846166991655321535529623870646888786637528995592800436177901746286272273374471701452991433047257863864601424252024791567368195056077320885329384322332391564645264143400798619665040608077549162173963649264049738362290606875883456826586710961041737908872035803481241600376705491726170293986797332763671875E-319", expect![[r#"
        Root@0..766
          AssignStmt@0..766
            NameExpr@0..1
              Name@0..1
                Identifier@0..1 "_"
            AsnOp@1..3
              Assign@1..3 ":="
            LiteralExpr@3..766
              RealLiteral@3..766 "3.3390685575711885818 ...""#]]);
    check("_:=2.4703282292062327208828439643411068618252990130716238221279284125033775363510437593264991818081799618989828234772285886546332835517796989819938739800539093906315035659515570226392290858392449105184435931802849936536152500319370457678249219365623669863658480757001585769269903706311928279558551332927834338409351978015531246597263579574622766465272827220056374006485499977096599470454020828166226237857393450736339007967761930577506740176324673600968951340535537458516661134223766678604162159680461914467291840300530057530849048765391711386591646239524912623653881879636239373280423891018672348497668235089863388587925628302755995657524455507255189313690836254779186948667994968324049705821028513185451396213837722826145437693412532098591327667236328124999e-324", expect![[r#"
        Root@0..764
          AssignStmt@0..764
            NameExpr@0..1
              Name@0..1
                Identifier@0..1 "_"
            AsnOp@1..3
              Assign@1..3 ":="
            LiteralExpr@3..764
              RealLiteral@3..764 "2.4703282292062327208 ...""#]]);
    check("_:=2.4703282292062327208828439643411068618252990130716238221279284125033775363510437593264991818081799618989828234772285886546332835517796989819938739800539093906315035659515570226392290858392449105184435931802849936536152500319370457678249219365623669863658480757001585769269903706311928279558551332927834338409351978015531246597263579574622766465272827220056374006485499977096599470454020828166226237857393450736339007967761930577506740176324673600968951340535537458516661134223766678604162159680461914467291840300530057530849048765391711386591646239524912623653881879636239373280423891018672348497668235089863388587925628302755995657524455507255189313690836254779186948667994968324049705821028513185451396213837722826145437693412532098591327667236328125e-324", expect![[r#"
        Root@0..761
          AssignStmt@0..761
            NameExpr@0..1
              Name@0..1
                Identifier@0..1 "_"
            AsnOp@1..3
              Assign@1..3 ":="
            LiteralExpr@3..761
              RealLiteral@3..761 "2.4703282292062327208 ...""#]]);
    check("_:=2.4703282292062327208828439643411068618252990130716238221279284125033775363510437593264991818081799618989828234772285886546332835517796989819938739800539093906315035659515570226392290858392449105184435931802849936536152500319370457678249219365623669863658480757001585769269903706311928279558551332927834338409351978015531246597263579574622766465272827220056374006485499977096599470454020828166226237857393450736339007967761930577506740176324673600968951340535537458516661134223766678604162159680461914467291840300530057530849048765391711386591646239524912623653881879636239373280423891018672348497668235089863388587925628302755995657524455507255189313690836254779186948667994968324049705821028513185451396213837722826145437693412532098591327667236328125001e-324", expect![[r#"
        Root@0..764
          AssignStmt@0..764
            NameExpr@0..1
              Name@0..1
                Identifier@0..1 "_"
            AsnOp@1..3
              Assign@1..3 ":="
            LiteralExpr@3..764
              RealLiteral@3..764 "2.4703282292062327208 ...""#]]);
    check("_:=7.4109846876186981626485318930233205854758970392148714663837852375101326090531312779794975454245398856969484704316857659638998506553390969459816219401617281718945106978546710679176872575177347315553307795408549809608457500958111373034747658096871009590975442271004757307809711118935784838675653998783503015228055934046593739791790738723868299395818481660169122019456499931289798411362062484498678713572180352209017023903285791732520220528974020802906854021606612375549983402671300035812486479041385743401875520901590172592547146296175134159774938718574737870961645638908718119841271673056017045493004705269590165763776884908267986972573366521765567941072508764337560846003984904972149117463085539556354188641513168478436313080237596295773983001708984374999e-324", expect![[r#"
        Root@0..764
          AssignStmt@0..764
            NameExpr@0..1
              Name@0..1
                Identifier@0..1 "_"
            AsnOp@1..3
              Assign@1..3 ":="
            LiteralExpr@3..764
              RealLiteral@3..764 "7.4109846876186981626 ...""#]]);
    check("_:=7.4109846876186981626485318930233205854758970392148714663837852375101326090531312779794975454245398856969484704316857659638998506553390969459816219401617281718945106978546710679176872575177347315553307795408549809608457500958111373034747658096871009590975442271004757307809711118935784838675653998783503015228055934046593739791790738723868299395818481660169122019456499931289798411362062484498678713572180352209017023903285791732520220528974020802906854021606612375549983402671300035812486479041385743401875520901590172592547146296175134159774938718574737870961645638908718119841271673056017045493004705269590165763776884908267986972573366521765567941072508764337560846003984904972149117463085539556354188641513168478436313080237596295773983001708984375e-324", expect![[r#"
        Root@0..761
          AssignStmt@0..761
            NameExpr@0..1
              Name@0..1
                Identifier@0..1 "_"
            AsnOp@1..3
              Assign@1..3 ":="
            LiteralExpr@3..761
              RealLiteral@3..761 "7.4109846876186981626 ...""#]]);
    check("_:=7.4109846876186981626485318930233205854758970392148714663837852375101326090531312779794975454245398856969484704316857659638998506553390969459816219401617281718945106978546710679176872575177347315553307795408549809608457500958111373034747658096871009590975442271004757307809711118935784838675653998783503015228055934046593739791790738723868299395818481660169122019456499931289798411362062484498678713572180352209017023903285791732520220528974020802906854021606612375549983402671300035812486479041385743401875520901590172592547146296175134159774938718574737870961645638908718119841271673056017045493004705269590165763776884908267986972573366521765567941072508764337560846003984904972149117463085539556354188641513168478436313080237596295773983001708984375001e-324", expect![[r#"
        Root@0..764
          AssignStmt@0..764
            NameExpr@0..1
              Name@0..1
                Identifier@0..1 "_"
            AsnOp@1..3
              Assign@1..3 ":="
            LiteralExpr@3..764
              RealLiteral@3..764 "7.4109846876186981626 ...""#]]);
    check(
        "_:=94393431193180696942841837085033647913224148539854e-358",
        expect![[r#"
            Root@0..58
              AssignStmt@0..58
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..58
                  RealLiteral@3..58 "943934311931806969428 ...""#]],
    );
    check("_:=104308485241983990666713401708072175773165034278685682646111762292409330928739751702404658197872319129036519947435319418387839758990478549477777586673075945844895981012024387992135617064532141489278815239849108105951619997829153633535314849999674266169258928940692239684771590065027025835804863585454872499320500023126142553932654370362024104462255244034053203998964360882487378334860197725139151265590832887433736189468858614521708567646743455601905935595381852723723645799866672558576993978025033590728687206296379801363024094048327273913079612469982585674824156000783167963081616214710691759864332339239688734656548790656486646106983450809073750535624894296242072010195710276073042036425579852459556183541199012652571123898996574563824424330960027873516082763671875e-1075", expect![[r#"
        Root@0..777
          AssignStmt@0..777
            NameExpr@0..1
              Name@0..1
                Identifier@0..1 "_"
            AsnOp@1..3
              Assign@1..3 ":="
            LiteralExpr@3..777
              RealLiteral@3..777 "104308485241983990666 ...""#]]);
}

#[test]
fn parse_string_literal() {
    check(
        r#"_:="hello""#,
        expect![[r#"
        Root@0..10
          AssignStmt@0..10
            NameExpr@0..1
              Name@0..1
                Identifier@0..1 "_"
            AsnOp@1..3
              Assign@1..3 ":="
            LiteralExpr@3..10
              StringLiteral@3..10 "\"hello\"""#]],
    );
}

#[test]
fn parse_char_literal() {
    check(
        r#"_:='hello'"#,
        expect![[r#"
        Root@0..10
          AssignStmt@0..10
            NameExpr@0..1
              Name@0..1
                Identifier@0..1 "_"
            AsnOp@1..3
              Assign@1..3 ":="
            LiteralExpr@3..10
              CharLiteral@3..10 "\'hello\'""#]],
    );
}

#[test]
fn parse_boolean_literal() {
    check(
        r#"_:=true"#,
        expect![[r#"
        Root@0..7
          AssignStmt@0..7
            NameExpr@0..1
              Name@0..1
                Identifier@0..1 "_"
            AsnOp@1..3
              Assign@1..3 ":="
            LiteralExpr@3..7
              KwTrue@3..7 "true""#]],
    );
    check(
        r#"_:=false"#,
        expect![[r#"
        Root@0..8
          AssignStmt@0..8
            NameExpr@0..1
              Name@0..1
                Identifier@0..1 "_"
            AsnOp@1..3
              Assign@1..3 ":="
            LiteralExpr@3..8
              KwFalse@3..8 "false""#]],
    );
}

#[test]
fn parse_bin_expr_simple() {
    check(
        "_:=1+2",
        expect![[r#"
            Root@0..6
              AssignStmt@0..6
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..6
                  LiteralExpr@3..4
                    IntLiteral@3..4 "1"
                  Plus@4..5 "+"
                  LiteralExpr@5..6
                    IntLiteral@5..6 "2""#]],
    );
}

#[test]
fn parse_bin_expr_with_left_assoc() {
    check(
        "_:=1+2+3+4",
        expect![[r#"
            Root@0..10
              AssignStmt@0..10
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..10
                  BinaryExpr@3..8
                    BinaryExpr@3..6
                      LiteralExpr@3..4
                        IntLiteral@3..4 "1"
                      Plus@4..5 "+"
                      LiteralExpr@5..6
                        IntLiteral@5..6 "2"
                    Plus@6..7 "+"
                    LiteralExpr@7..8
                      IntLiteral@7..8 "3"
                  Plus@8..9 "+"
                  LiteralExpr@9..10
                    IntLiteral@9..10 "4""#]],
    );
}

#[test]
fn parse_bin_expr_with_mixed_binding_power() {
    check(
        "_:=1+2*3-4/5",
        expect![[r#"
            Root@0..12
              AssignStmt@0..12
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..12
                  BinaryExpr@3..8
                    LiteralExpr@3..4
                      IntLiteral@3..4 "1"
                    Plus@4..5 "+"
                    BinaryExpr@5..8
                      LiteralExpr@5..6
                        IntLiteral@5..6 "2"
                      Star@6..7 "*"
                      LiteralExpr@7..8
                        IntLiteral@7..8 "3"
                  Minus@8..9 "-"
                  BinaryExpr@9..12
                    LiteralExpr@9..10
                      IntLiteral@9..10 "4"
                    Slash@10..11 "/"
                    LiteralExpr@11..12
                      IntLiteral@11..12 "5""#]],
    );
}

#[test]
fn parse_expr_with_leading_ws() {
    check(
        "_:=     16#480",
        expect![[r##"
            Root@0..14
              AssignStmt@0..14
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..8
                  Assign@1..3 ":="
                  Whitespace@3..8 "     "
                LiteralExpr@8..14
                  RadixLiteral@8..14 "16#480""##]],
    );
}

#[test]
fn parse_expr_with_trailing_ws() {
    check(
        "_:=1.0e5    ",
        expect![[r#"
            Root@0..12
              AssignStmt@0..12
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..12
                  RealLiteral@3..8 "1.0e5"
                  Whitespace@8..12 "    ""#]],
    );
}

#[test]
fn parse_expr_with_surrounding_ws() {
    check(
        "_:=  12345    ",
        expect![[r#"
            Root@0..14
              AssignStmt@0..14
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..5
                  Assign@1..3 ":="
                  Whitespace@3..5 "  "
                LiteralExpr@5..14
                  IntLiteral@5..10 "12345"
                  Whitespace@10..14 "    ""#]],
    );
}

#[test]
fn parse_bin_expr_with_ws() {
    check(
        "_:=  1 + 2 - 3* 4    ",
        expect![[r#"
            Root@0..21
              AssignStmt@0..21
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..5
                  Assign@1..3 ":="
                  Whitespace@3..5 "  "
                BinaryExpr@5..21
                  BinaryExpr@5..11
                    LiteralExpr@5..7
                      IntLiteral@5..6 "1"
                      Whitespace@6..7 " "
                    Plus@7..8 "+"
                    Whitespace@8..9 " "
                    LiteralExpr@9..11
                      IntLiteral@9..10 "2"
                      Whitespace@10..11 " "
                  Minus@11..12 "-"
                  Whitespace@12..13 " "
                  BinaryExpr@13..21
                    LiteralExpr@13..14
                      IntLiteral@13..14 "3"
                    Star@14..15 "*"
                    Whitespace@15..16 " "
                    LiteralExpr@16..21
                      IntLiteral@16..17 "4"
                      Whitespace@17..21 "    ""#]],
    );
}

#[test]
fn parse_exprs_with_comments() {
    check(
        r#"
        1
        + 2 % interspersed line comment
        + /* random interleaved comment */ 3

        3 - 2 % step down two
        + 1 % go back up 1"#,
        expect![[r#"
            Root@0..153
              Whitespace@0..9 "\n        "
              Error@9..19
                IntLiteral@9..10 "1"
                Whitespace@10..19 "\n        "
              Error@19..21
                Plus@19..20 "+"
                Whitespace@20..21 " "
              Error@21..59
                IntLiteral@21..22 "2"
                Whitespace@22..23 " "
                Comment@23..50 "% interspersed line c ..."
                Whitespace@50..59 "\n        "
              Error@59..94
                Plus@59..60 "+"
                Whitespace@60..61 " "
                Comment@61..93 "/* random interleaved ..."
                Whitespace@93..94 " "
              Error@94..105
                IntLiteral@94..95 "3"
                Whitespace@95..105 "\n\n        "
              Error@105..107
                IntLiteral@105..106 "3"
                Whitespace@106..107 " "
              Error@107..109
                Minus@107..108 "-"
                Whitespace@108..109 " "
              Error@109..135
                IntLiteral@109..110 "2"
                Whitespace@110..111 " "
                Comment@111..126 "% step down two"
                Whitespace@126..135 "\n        "
              Error@135..137
                Plus@135..136 "+"
                Whitespace@136..137 " "
              Error@137..153
                IntLiteral@137..138 "1"
                Whitespace@138..139 " "
                Comment@139..153 "% go back up 1"
            error at 9..10: expected ’var’, ’const’, ’type’, identifier, ’^’ or ’bits’, but found int literal
            error at 19..20: expected ’var’, ’const’, ’type’, identifier, ’^’ or ’bits’, but found ’+’
            error at 21..22: expected ’var’, ’const’, ’type’, identifier, ’^’ or ’bits’, but found int literal
            error at 59..60: expected ’var’, ’const’, ’type’, identifier, ’^’ or ’bits’, but found ’+’
            error at 94..95: expected ’var’, ’const’, ’type’, identifier, ’^’ or ’bits’, but found int literal
            error at 105..106: expected ’var’, ’const’, ’type’, identifier, ’^’ or ’bits’, but found int literal
            error at 107..108: expected ’var’, ’const’, ’type’, identifier, ’^’ or ’bits’, but found ’-’
            error at 109..110: expected ’var’, ’const’, ’type’, identifier, ’^’ or ’bits’, but found int literal
            error at 135..136: expected ’var’, ’const’, ’type’, identifier, ’^’ or ’bits’, but found ’+’
            error at 137..138: expected ’var’, ’const’, ’type’, identifier, ’^’ or ’bits’, but found int literal"#]],
    );
}

#[test]
fn parse_simple_infix() {
    check(
        "_:=1 => 2",
        expect![[r#"
            Root@0..9
              AssignStmt@0..9
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..9
                  LiteralExpr@3..5
                    IntLiteral@3..4 "1"
                    Whitespace@4..5 " "
                  Imply@5..7 "=>"
                  Whitespace@7..8 " "
                  LiteralExpr@8..9
                    IntLiteral@8..9 "2""#]],
    );
    check(
        "_:=1 or 2",
        expect![[r#"
            Root@0..9
              AssignStmt@0..9
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..9
                  LiteralExpr@3..5
                    IntLiteral@3..4 "1"
                    Whitespace@4..5 " "
                  KwOr@5..7 "or"
                  Whitespace@7..8 " "
                  LiteralExpr@8..9
                    IntLiteral@8..9 "2""#]],
    );
    check(
        "_:=1 | 2",
        expect![[r#"
            Root@0..8
              AssignStmt@0..8
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..8
                  LiteralExpr@3..5
                    IntLiteral@3..4 "1"
                    Whitespace@4..5 " "
                  Pipe@5..6 "|"
                  Whitespace@6..7 " "
                  LiteralExpr@7..8
                    IntLiteral@7..8 "2""#]],
    );
    check(
        "_:=1 and 2",
        expect![[r#"
            Root@0..10
              AssignStmt@0..10
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..10
                  LiteralExpr@3..5
                    IntLiteral@3..4 "1"
                    Whitespace@4..5 " "
                  KwAnd@5..8 "and"
                  Whitespace@8..9 " "
                  LiteralExpr@9..10
                    IntLiteral@9..10 "2""#]],
    );
    check(
        "_:=1 & 2",
        expect![[r#"
            Root@0..8
              AssignStmt@0..8
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..8
                  LiteralExpr@3..5
                    IntLiteral@3..4 "1"
                    Whitespace@4..5 " "
                  Ampersand@5..6 "&"
                  Whitespace@6..7 " "
                  LiteralExpr@7..8
                    IntLiteral@7..8 "2""#]],
    );
    check(
        "_:=1 < 2",
        expect![[r#"
            Root@0..8
              AssignStmt@0..8
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..8
                  LiteralExpr@3..5
                    IntLiteral@3..4 "1"
                    Whitespace@4..5 " "
                  Less@5..6 "<"
                  Whitespace@6..7 " "
                  LiteralExpr@7..8
                    IntLiteral@7..8 "2""#]],
    );
    check(
        "_:=1 > 2",
        expect![[r#"
            Root@0..8
              AssignStmt@0..8
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..8
                  LiteralExpr@3..5
                    IntLiteral@3..4 "1"
                    Whitespace@4..5 " "
                  Greater@5..6 ">"
                  Whitespace@6..7 " "
                  LiteralExpr@7..8
                    IntLiteral@7..8 "2""#]],
    );
    check(
        "_:=1 <= 2",
        expect![[r#"
            Root@0..9
              AssignStmt@0..9
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..9
                  LiteralExpr@3..5
                    IntLiteral@3..4 "1"
                    Whitespace@4..5 " "
                  LessEqu@5..7 "<="
                  Whitespace@7..8 " "
                  LiteralExpr@8..9
                    IntLiteral@8..9 "2""#]],
    );
    check(
        "_:=1 >= 2",
        expect![[r#"
            Root@0..9
              AssignStmt@0..9
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..9
                  LiteralExpr@3..5
                    IntLiteral@3..4 "1"
                    Whitespace@4..5 " "
                  GreaterEqu@5..7 ">="
                  Whitespace@7..8 " "
                  LiteralExpr@8..9
                    IntLiteral@8..9 "2""#]],
    );
    check(
        "_:=1 + 2",
        expect![[r#"
            Root@0..8
              AssignStmt@0..8
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..8
                  LiteralExpr@3..5
                    IntLiteral@3..4 "1"
                    Whitespace@4..5 " "
                  Plus@5..6 "+"
                  Whitespace@6..7 " "
                  LiteralExpr@7..8
                    IntLiteral@7..8 "2""#]],
    );
    check(
        "_:=1 - 2",
        expect![[r#"
            Root@0..8
              AssignStmt@0..8
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..8
                  LiteralExpr@3..5
                    IntLiteral@3..4 "1"
                    Whitespace@4..5 " "
                  Minus@5..6 "-"
                  Whitespace@6..7 " "
                  LiteralExpr@7..8
                    IntLiteral@7..8 "2""#]],
    );
    check(
        "_:=1 * 2",
        expect![[r#"
            Root@0..8
              AssignStmt@0..8
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..8
                  LiteralExpr@3..5
                    IntLiteral@3..4 "1"
                    Whitespace@4..5 " "
                  Star@5..6 "*"
                  Whitespace@6..7 " "
                  LiteralExpr@7..8
                    IntLiteral@7..8 "2""#]],
    );
    check(
        "_:=1 / 2",
        expect![[r#"
            Root@0..8
              AssignStmt@0..8
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..8
                  LiteralExpr@3..5
                    IntLiteral@3..4 "1"
                    Whitespace@4..5 " "
                  Slash@5..6 "/"
                  Whitespace@6..7 " "
                  LiteralExpr@7..8
                    IntLiteral@7..8 "2""#]],
    );
    check(
        "_:=1 div 2",
        expect![[r#"
            Root@0..10
              AssignStmt@0..10
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..10
                  LiteralExpr@3..5
                    IntLiteral@3..4 "1"
                    Whitespace@4..5 " "
                  KwDiv@5..8 "div"
                  Whitespace@8..9 " "
                  LiteralExpr@9..10
                    IntLiteral@9..10 "2""#]],
    );
    check(
        "_:=1 rem 2",
        expect![[r#"
            Root@0..10
              AssignStmt@0..10
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..10
                  LiteralExpr@3..5
                    IntLiteral@3..4 "1"
                    Whitespace@4..5 " "
                  KwRem@5..8 "rem"
                  Whitespace@8..9 " "
                  LiteralExpr@9..10
                    IntLiteral@9..10 "2""#]],
    );
    check(
        "_:=1 mod 2",
        expect![[r#"
            Root@0..10
              AssignStmt@0..10
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..10
                  LiteralExpr@3..5
                    IntLiteral@3..4 "1"
                    Whitespace@4..5 " "
                  KwMod@5..8 "mod"
                  Whitespace@8..9 " "
                  LiteralExpr@9..10
                    IntLiteral@9..10 "2""#]],
    );
    check(
        "_:=1 shl 2",
        expect![[r#"
            Root@0..10
              AssignStmt@0..10
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..10
                  LiteralExpr@3..5
                    IntLiteral@3..4 "1"
                    Whitespace@4..5 " "
                  KwShl@5..8 "shl"
                  Whitespace@8..9 " "
                  LiteralExpr@9..10
                    IntLiteral@9..10 "2""#]],
    );
    check(
        "_:=1 shr 2",
        expect![[r#"
            Root@0..10
              AssignStmt@0..10
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..10
                  LiteralExpr@3..5
                    IntLiteral@3..4 "1"
                    Whitespace@4..5 " "
                  KwShr@5..8 "shr"
                  Whitespace@8..9 " "
                  LiteralExpr@9..10
                    IntLiteral@9..10 "2""#]],
    );
    check(
        "_:=1 ** 2",
        expect![[r#"
            Root@0..9
              AssignStmt@0..9
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..9
                  LiteralExpr@3..5
                    IntLiteral@3..4 "1"
                    Whitespace@4..5 " "
                  Exp@5..7 "**"
                  Whitespace@7..8 " "
                  LiteralExpr@8..9
                    IntLiteral@8..9 "2""#]],
    );
    // call, dot, and arrow are complex operators
    // not in and not eq are compound infix
}

#[test]
fn exp_right_associativity() {
    check(
        "_:=2 ** 3 ** 4",
        expect![[r#"
            Root@0..14
              AssignStmt@0..14
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..14
                  LiteralExpr@3..5
                    IntLiteral@3..4 "2"
                    Whitespace@4..5 " "
                  Exp@5..7 "**"
                  Whitespace@7..8 " "
                  BinaryExpr@8..14
                    LiteralExpr@8..10
                      IntLiteral@8..9 "3"
                      Whitespace@9..10 " "
                    Exp@10..12 "**"
                    Whitespace@12..13 " "
                    LiteralExpr@13..14
                      IntLiteral@13..14 "4""#]],
    );
}

#[test]
fn parse_ne_form1() {
    check(
        "_:=1 ~= 2",
        expect![[r#"
            Root@0..9
              AssignStmt@0..9
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..9
                  LiteralExpr@3..5
                    IntLiteral@3..4 "1"
                    Whitespace@4..5 " "
                  NotEq@5..8
                    Tilde@5..6 "~"
                    Equ@6..7 "="
                    Whitespace@7..8 " "
                  LiteralExpr@8..9
                    IntLiteral@8..9 "2""#]],
    );
}

#[test]
fn parse_ne_form2() {
    check(
        "_:=1 ~ = 2",
        expect![[r#"
            Root@0..10
              AssignStmt@0..10
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..10
                  LiteralExpr@3..5
                    IntLiteral@3..4 "1"
                    Whitespace@4..5 " "
                  NotEq@5..9
                    Tilde@5..6 "~"
                    Whitespace@6..7 " "
                    Equ@7..8 "="
                    Whitespace@8..9 " "
                  LiteralExpr@9..10
                    IntLiteral@9..10 "2""#]],
    );
}

#[test]
fn parse_ne_form3() {
    check(
        "_:=1 not = 2",
        expect![[r#"
            Root@0..12
              AssignStmt@0..12
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..12
                  LiteralExpr@3..5
                    IntLiteral@3..4 "1"
                    Whitespace@4..5 " "
                  NotEq@5..11
                    KwNot@5..8 "not"
                    Whitespace@8..9 " "
                    Equ@9..10 "="
                    Whitespace@10..11 " "
                  LiteralExpr@11..12
                    IntLiteral@11..12 "2""#]],
    );
}

#[test]
fn parse_ne_form4() {
    check(
        "_:=1 not= 2",
        expect![[r#"
            Root@0..11
              AssignStmt@0..11
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..11
                  LiteralExpr@3..5
                    IntLiteral@3..4 "1"
                    Whitespace@4..5 " "
                  NotEq@5..10
                    KwNot@5..8 "not"
                    Equ@8..9 "="
                    Whitespace@9..10 " "
                  LiteralExpr@10..11
                    IntLiteral@10..11 "2""#]],
    );
}

#[test]
fn parse_in() {
    check(
        "_:=1 in a",
        expect![[r#"
            Root@0..9
              AssignStmt@0..9
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..9
                  LiteralExpr@3..5
                    IntLiteral@3..4 "1"
                    Whitespace@4..5 " "
                  KwIn@5..7 "in"
                  Whitespace@7..8 " "
                  NameExpr@8..9
                    Name@8..9
                      Identifier@8..9 "a""#]],
    );
}

#[test]
fn parse_not_in_form1() {
    check(
        "_:=1 not in a",
        expect![[r#"
            Root@0..13
              AssignStmt@0..13
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..13
                  LiteralExpr@3..5
                    IntLiteral@3..4 "1"
                    Whitespace@4..5 " "
                  NotIn@5..12
                    KwNot@5..8 "not"
                    Whitespace@8..9 " "
                    KwIn@9..11 "in"
                    Whitespace@11..12 " "
                  NameExpr@12..13
                    Name@12..13
                      Identifier@12..13 "a""#]],
    );
}

#[test]
fn parse_not_in_form2() {
    check(
        "_:=1 ~in a",
        expect![[r#"
            Root@0..10
              AssignStmt@0..10
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..10
                  LiteralExpr@3..5
                    IntLiteral@3..4 "1"
                    Whitespace@4..5 " "
                  NotIn@5..9
                    Tilde@5..6 "~"
                    KwIn@6..8 "in"
                    Whitespace@8..9 " "
                  NameExpr@9..10
                    Name@9..10
                      Identifier@9..10 "a""#]],
    );
}

#[test]
fn parse_not_in_form3() {
    check(
        "_:=1 ~ in a",
        expect![[r#"
            Root@0..11
              AssignStmt@0..11
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..11
                  LiteralExpr@3..5
                    IntLiteral@3..4 "1"
                    Whitespace@4..5 " "
                  NotIn@5..10
                    Tilde@5..6 "~"
                    Whitespace@6..7 " "
                    KwIn@7..9 "in"
                    Whitespace@9..10 " "
                  NameExpr@10..11
                    Name@10..11
                      Identifier@10..11 "a""#]],
    );
}

#[test]
fn recover_tilde_as_infix() {
    check(
        "_:=1 ~ 2",
        expect![[r#"
            Root@0..8
              AssignStmt@0..8
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..5
                  IntLiteral@3..4 "1"
                  Whitespace@4..5 " "
                Error@5..8
                  Tilde@5..6 "~"
                  Whitespace@6..7 " "
                  IntLiteral@7..8 "2"
            error at 7..8: expected ’in’ or ’=’, but found int literal"#]],
    );
}

#[test]
fn recover_tilde_not_infix() {
    check(
        "_:=1 not 2",
        expect![[r#"
            Root@0..10
              AssignStmt@0..10
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                LiteralExpr@3..5
                  IntLiteral@3..4 "1"
                  Whitespace@4..5 " "
                Error@5..10
                  KwNot@5..8 "not"
                  Whitespace@8..9 " "
                  IntLiteral@9..10 "2"
            error at 9..10: expected ’in’ or ’=’, but found int literal"#]],
    );
}

#[test]
fn parse_simple_prefix() {
    check(
        "_:=-10",
        expect![[r#"
            Root@0..6
              AssignStmt@0..6
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                UnaryExpr@3..6
                  Minus@3..4 "-"
                  LiteralExpr@4..6
                    IntLiteral@4..6 "10""#]],
    );
}

#[test]
fn negation_over_arithmetic() {
    check(
        "_:=-10+20",
        expect![[r#"
            Root@0..9
              AssignStmt@0..9
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..9
                  UnaryExpr@3..6
                    Minus@3..4 "-"
                    LiteralExpr@4..6
                      IntLiteral@4..6 "10"
                  Plus@6..7 "+"
                  LiteralExpr@7..9
                    IntLiteral@7..9 "20""#]],
    );
}

#[test]
fn parse_nested_parens() {
    check(
        "_:=(((20)))",
        expect![[r#"
            Root@0..11
              AssignStmt@0..11
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                ParenExpr@3..11
                  LeftParen@3..4 "("
                  ParenExpr@4..10
                    LeftParen@4..5 "("
                    ParenExpr@5..9
                      LeftParen@5..6 "("
                      LiteralExpr@6..8
                        IntLiteral@6..8 "20"
                      RightParen@8..9 ")"
                    RightParen@9..10 ")"
                  RightParen@10..11 ")""#]],
    );
}

#[test]
fn parens_alter_precedence() {
    check(
        "_:=1/(2+3)",
        expect![[r#"
            Root@0..10
              AssignStmt@0..10
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..10
                  LiteralExpr@3..4
                    IntLiteral@3..4 "1"
                  Slash@4..5 "/"
                  ParenExpr@5..10
                    LeftParen@5..6 "("
                    BinaryExpr@6..9
                      LiteralExpr@6..7
                        IntLiteral@6..7 "2"
                      Plus@7..8 "+"
                      LiteralExpr@8..9
                        IntLiteral@8..9 "3"
                    RightParen@9..10 ")""#]],
    );
}

#[test]
fn recover_just_right_paren() {
    check(
        "_:=)",
        expect![[r##"
            Root@0..4
              AssignStmt@0..4
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                Error@3..4
                  RightParen@3..4 ")"
            error at 3..4: expected identifier, ’^’, ’bits’, int literal, explicit int literal, real literal, string literal, char literal, ’true’, ’false’, ’(’, ’init’, ’not’, ’+’, ’-’ or ’#’, but found ’)’"##]],
    )
}

#[test]
fn recover_too_many_right_parens() {
    check(
        "_:=(1))",
        expect![[r#"
            Root@0..7
              AssignStmt@0..6
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                ParenExpr@3..6
                  LeftParen@3..4 "("
                  LiteralExpr@4..5
                    IntLiteral@4..5 "1"
                  RightParen@5..6 ")"
              Error@6..7
                RightParen@6..7 ")"
            error at 6..7: expected ’var’, ’const’, ’type’, identifier, ’^’ or ’bits’, but found ’)’"#]],
    )
}

#[test]
fn recover_missing_closing_paren() {
    check(
        "_:=(1",
        expect![[r#"
            Root@0..5
              AssignStmt@0..5
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                ParenExpr@3..5
                  LeftParen@3..4 "("
                  LiteralExpr@4..5
                    IntLiteral@4..5 "1"
            error at 4..5: expected ’)’"#]],
    );
}

#[test]
fn recover_missing_closing_paren_and_rhs() {
    check(
        "_:=(1+",
        expect![[r##"
            Root@0..6
              AssignStmt@0..6
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                ParenExpr@3..6
                  LeftParen@3..4 "("
                  BinaryExpr@4..6
                    LiteralExpr@4..5
                      IntLiteral@4..5 "1"
                    Plus@5..6 "+"
            error at 5..6: expected identifier, ’^’, ’bits’, int literal, explicit int literal, real literal, string literal, char literal, ’true’, ’false’, ’(’, ’init’, ’not’, ’+’, ’-’ or ’#’
            error at 5..6: expected ’)’"##]],
    );
}

#[test]
fn recover_missing_rhs() {
    check(
        "_:=1+",
        expect![[r##"
            Root@0..5
              AssignStmt@0..5
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                BinaryExpr@3..5
                  LiteralExpr@3..4
                    IntLiteral@3..4 "1"
                  Plus@4..5 "+"
            error at 4..5: expected identifier, ’^’, ’bits’, int literal, explicit int literal, real literal, string literal, char literal, ’true’, ’false’, ’(’, ’init’, ’not’, ’+’, ’-’ or ’#’"##]],
    );
}

// Field exprs

#[test]
fn parse_field_expr() {
    check(
        "_:=a.b",
        expect![[r#"
            Root@0..6
              AssignStmt@0..6
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                FieldExpr@3..6
                  NameExpr@3..4
                    Name@3..4
                      Identifier@3..4 "a"
                  Dot@4..5 "."
                  Name@5..6
                    Identifier@5..6 "b""#]],
    );
}

#[test]
fn chained_field_expr() {
    check(
        "_:=a.b.c.d",
        expect![[r#"
            Root@0..10
              AssignStmt@0..10
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                FieldExpr@3..10
                  FieldExpr@3..8
                    FieldExpr@3..6
                      NameExpr@3..4
                        Name@3..4
                          Identifier@3..4 "a"
                      Dot@4..5 "."
                      Name@5..6
                        Identifier@5..6 "b"
                    Dot@6..7 "."
                    Name@7..8
                      Identifier@7..8 "c"
                  Dot@8..9 "."
                  Name@9..10
                    Identifier@9..10 "d""#]],
    );
}

#[test]
fn recover_field_expr_missing_field() {
    check(
        "_:=a.",
        expect![[r#"
            Root@0..5
              AssignStmt@0..5
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                FieldExpr@3..5
                  NameExpr@3..4
                    Name@3..4
                      Identifier@3..4 "a"
                  Dot@4..5 "."
            error at 4..5: expected identifier"#]],
    );
}

#[test]
fn recover_field_missing_closing_paren_and_field() {
    check(
        "_:=(a.",
        expect![[r#"
            Root@0..6
              AssignStmt@0..6
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                ParenExpr@3..6
                  LeftParen@3..4 "("
                  FieldExpr@4..6
                    NameExpr@4..5
                      Name@4..5
                        Identifier@4..5 "a"
                    Dot@5..6 "."
            error at 5..6: expected identifier
            error at 5..6: expected ’)’"#]],
    );
}

// Arrow exprs

#[test]
fn parse_arrow_expr() {
    check(
        "_:=a->b",
        expect![[r#"
            Root@0..7
              AssignStmt@0..7
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                ArrowExpr@3..7
                  NameExpr@3..4
                    Name@3..4
                      Identifier@3..4 "a"
                  Arrow@4..6 "->"
                  Name@6..7
                    Identifier@6..7 "b""#]],
    );
}

#[test]
fn chained_arrow_expr() {
    check(
        "_:=a->b->c->d",
        expect![[r#"
            Root@0..13
              AssignStmt@0..13
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                ArrowExpr@3..13
                  ArrowExpr@3..10
                    ArrowExpr@3..7
                      NameExpr@3..4
                        Name@3..4
                          Identifier@3..4 "a"
                      Arrow@4..6 "->"
                      Name@6..7
                        Identifier@6..7 "b"
                    Arrow@7..9 "->"
                    Name@9..10
                      Identifier@9..10 "c"
                  Arrow@10..12 "->"
                  Name@12..13
                    Identifier@12..13 "d""#]],
    );
}

#[test]
fn recover_arrow_expr_missing_field() {
    check(
        "_:=a->",
        expect![[r#"
            Root@0..6
              AssignStmt@0..6
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                ArrowExpr@3..6
                  NameExpr@3..4
                    Name@3..4
                      Identifier@3..4 "a"
                  Arrow@4..6 "->"
            error at 4..6: expected identifier"#]],
    );
}

#[test]
fn recover_arrow_missing_closing_paren_and_field() {
    check(
        "_:=(a->",
        expect![[r#"
            Root@0..7
              AssignStmt@0..7
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                ParenExpr@3..7
                  LeftParen@3..4 "("
                  ArrowExpr@4..7
                    NameExpr@4..5
                      Name@4..5
                        Identifier@4..5 "a"
                    Arrow@5..7 "->"
            error at 5..7: expected identifier
            error at 5..7: expected ’)’"#]],
    );
}

#[test]
fn chained_field_and_arrow_expr() {
    check(
        "_:=a.b->c->d.e->f.g->h",
        expect![[r#"
            Root@0..22
              AssignStmt@0..22
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                ArrowExpr@3..22
                  FieldExpr@3..19
                    ArrowExpr@3..17
                      FieldExpr@3..14
                        ArrowExpr@3..12
                          ArrowExpr@3..9
                            FieldExpr@3..6
                              NameExpr@3..4
                                Name@3..4
                                  Identifier@3..4 "a"
                              Dot@4..5 "."
                              Name@5..6
                                Identifier@5..6 "b"
                            Arrow@6..8 "->"
                            Name@8..9
                              Identifier@8..9 "c"
                          Arrow@9..11 "->"
                          Name@11..12
                            Identifier@11..12 "d"
                        Dot@12..13 "."
                        Name@13..14
                          Identifier@13..14 "e"
                      Arrow@14..16 "->"
                      Name@16..17
                        Identifier@16..17 "f"
                    Dot@17..18 "."
                    Name@18..19
                      Identifier@18..19 "g"
                  Arrow@19..21 "->"
                  Name@21..22
                    Identifier@21..22 "h""#]],
    );
}

// Call exprs
#[test]
fn parse_call_expr() {
    check(
        "_:=a(b)",
        expect![[r#"
            Root@0..7
              AssignStmt@0..7
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                CallExpr@3..7
                  NameExpr@3..4
                    Name@3..4
                      Identifier@3..4 "a"
                  LeftParen@4..5 "("
                  ParamList@5..6
                    Param@5..6
                      NameExpr@5..6
                        Name@5..6
                          Identifier@5..6 "b"
                  RightParen@6..7 ")""#]],
    );
}

#[test]
fn parse_nested_call_expr() {
    check("_:=a(b(c(), d, e), f, g)", expect![[r#"
        Root@0..24
          AssignStmt@0..24
            NameExpr@0..1
              Name@0..1
                Identifier@0..1 "_"
            AsnOp@1..3
              Assign@1..3 ":="
            CallExpr@3..24
              NameExpr@3..4
                Name@3..4
                  Identifier@3..4 "a"
              LeftParen@4..5 "("
              ParamList@5..23
                Param@5..19
                  CallExpr@5..17
                    NameExpr@5..6
                      Name@5..6
                        Identifier@5..6 "b"
                    LeftParen@6..7 "("
                    ParamList@7..16
                      Param@7..12
                        CallExpr@7..10
                          NameExpr@7..8
                            Name@7..8
                              Identifier@7..8 "c"
                          LeftParen@8..9 "("
                          ParamList@9..9
                          RightParen@9..10 ")"
                        Comma@10..11 ","
                        Whitespace@11..12 " "
                      Param@12..15
                        NameExpr@12..13
                          Name@12..13
                            Identifier@12..13 "d"
                        Comma@13..14 ","
                        Whitespace@14..15 " "
                      Param@15..16
                        NameExpr@15..16
                          Name@15..16
                            Identifier@15..16 "e"
                    RightParen@16..17 ")"
                  Comma@17..18 ","
                  Whitespace@18..19 " "
                Param@19..22
                  NameExpr@19..20
                    Name@19..20
                      Identifier@19..20 "f"
                  Comma@20..21 ","
                  Whitespace@21..22 " "
                Param@22..23
                  NameExpr@22..23
                    Name@22..23
                      Identifier@22..23 "g"
              RightParen@23..24 ")""#]]);
}

#[test]
fn parse_empty_call_expr() {
    check(
        "_:=a()",
        expect![[r#"
            Root@0..6
              AssignStmt@0..6
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                CallExpr@3..6
                  NameExpr@3..4
                    Name@3..4
                      Identifier@3..4 "a"
                  LeftParen@4..5 "("
                  ParamList@5..5
                  RightParen@5..6 ")""#]],
    );
}

#[test]
fn parse_call_expr_with_many_args() {
    check(
        "_:=a(1, 2 + 3, c)",
        expect![[r#"
            Root@0..17
              AssignStmt@0..17
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                CallExpr@3..17
                  NameExpr@3..4
                    Name@3..4
                      Identifier@3..4 "a"
                  LeftParen@4..5 "("
                  ParamList@5..16
                    Param@5..8
                      LiteralExpr@5..6
                        IntLiteral@5..6 "1"
                      Comma@6..7 ","
                      Whitespace@7..8 " "
                    Param@8..15
                      BinaryExpr@8..13
                        LiteralExpr@8..10
                          IntLiteral@8..9 "2"
                          Whitespace@9..10 " "
                        Plus@10..11 "+"
                        Whitespace@11..12 " "
                        LiteralExpr@12..13
                          IntLiteral@12..13 "3"
                      Comma@13..14 ","
                      Whitespace@14..15 " "
                    Param@15..16
                      NameExpr@15..16
                        Name@15..16
                          Identifier@15..16 "c"
                  RightParen@16..17 ")""#]],
    );
}

#[test]
fn recover_call_expr_missing_closing_paren() {
    check(
        "_:=a(1",
        expect![[r#"
            Root@0..6
              AssignStmt@0..6
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                CallExpr@3..6
                  NameExpr@3..4
                    Name@3..4
                      Identifier@3..4 "a"
                  LeftParen@4..5 "("
                  ParamList@5..6
                    Param@5..6
                      LiteralExpr@5..6
                        IntLiteral@5..6 "1"
            error at 5..6: expected ’,’ or ’)’"#]],
    );
}

#[test]
fn recover_call_expr_missing_last_arg() {
    check(
        "_:=a(1,)",
        expect![[r##"
            Root@0..8
              AssignStmt@0..8
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                CallExpr@3..8
                  NameExpr@3..4
                    Name@3..4
                      Identifier@3..4 "a"
                  LeftParen@4..5 "("
                  ParamList@5..7
                    Param@5..7
                      LiteralExpr@5..6
                        IntLiteral@5..6 "1"
                      Comma@6..7 ","
                    Param@7..7
                  RightParen@7..8 ")"
            error at 7..8: expected identifier, ’^’, ’bits’, int literal, explicit int literal, real literal, string literal, char literal, ’true’, ’false’, ’(’, ’init’, ’not’, ’+’, ’-’ or ’#’, but found ’)’"##]],
    );
}

#[test]
fn recover_call_expr_missing_last_arg_and_closing_paren() {
    check(
        "_:=a(1,",
        expect![[r##"
            Root@0..7
              AssignStmt@0..7
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                CallExpr@3..7
                  NameExpr@3..4
                    Name@3..4
                      Identifier@3..4 "a"
                  LeftParen@4..5 "("
                  ParamList@5..7
                    Param@5..7
                      LiteralExpr@5..6
                        IntLiteral@5..6 "1"
                      Comma@6..7 ","
                    Param@7..7
            error at 6..7: expected identifier, ’^’, ’bits’, int literal, explicit int literal, real literal, string literal, char literal, ’true’, ’false’, ’(’, ’init’, ’not’, ’+’, ’-’ or ’#’
            error at 6..7: expected ’,’ or ’)’"##]],
    );
}

#[test]
fn recover_call_expr_missing_delim() {
    check(
        "_:=a(1 1)",
        expect![[r#"
            Root@0..9
              AssignStmt@0..8
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                CallExpr@3..8
                  NameExpr@3..4
                    Name@3..4
                      Identifier@3..4 "a"
                  LeftParen@4..5 "("
                  ParamList@5..7
                    Param@5..7
                      LiteralExpr@5..7
                        IntLiteral@5..6 "1"
                        Whitespace@6..7 " "
                  Error@7..8
                    IntLiteral@7..8 "1"
              Error@8..9
                RightParen@8..9 ")"
            error at 7..8: expected ’,’ or ’)’, but found int literal
            error at 8..9: expected ’var’, ’const’, ’type’, identifier, ’^’ or ’bits’, but found ’)’"#]],
    );
}

#[test]
fn recover_call_expr_missing_param() {
    check("_:=a(1,,1)", expect![[r##"
        Root@0..10
          AssignStmt@0..10
            NameExpr@0..1
              Name@0..1
                Identifier@0..1 "_"
            AsnOp@1..3
              Assign@1..3 ":="
            CallExpr@3..10
              NameExpr@3..4
                Name@3..4
                  Identifier@3..4 "a"
              LeftParen@4..5 "("
              ParamList@5..9
                Param@5..7
                  LiteralExpr@5..6
                    IntLiteral@5..6 "1"
                  Comma@6..7 ","
                Param@7..8
                  Comma@7..8 ","
                Param@8..9
                  LiteralExpr@8..9
                    IntLiteral@8..9 "1"
              RightParen@9..10 ")"
        error at 7..8: expected identifier, ’^’, ’bits’, int literal, explicit int literal, real literal, string literal, char literal, ’true’, ’false’, ’(’, ’init’, ’not’, ’+’, ’-’ or ’#’, but found ’,’"##]]);
}

#[test]
fn recover_call_expr_missing_params() {
    check("_:=a(1,,,1)", expect![[r##"
        Root@0..11
          AssignStmt@0..11
            NameExpr@0..1
              Name@0..1
                Identifier@0..1 "_"
            AsnOp@1..3
              Assign@1..3 ":="
            CallExpr@3..11
              NameExpr@3..4
                Name@3..4
                  Identifier@3..4 "a"
              LeftParen@4..5 "("
              ParamList@5..10
                Param@5..7
                  LiteralExpr@5..6
                    IntLiteral@5..6 "1"
                  Comma@6..7 ","
                Param@7..8
                  Comma@7..8 ","
                Param@8..9
                  Comma@8..9 ","
                Param@9..10
                  LiteralExpr@9..10
                    IntLiteral@9..10 "1"
              RightParen@10..11 ")"
        error at 7..8: expected identifier, ’^’, ’bits’, int literal, explicit int literal, real literal, string literal, char literal, ’true’, ’false’, ’(’, ’init’, ’not’, ’+’, ’-’ or ’#’, but found ’,’
        error at 8..9: expected identifier, ’^’, ’bits’, int literal, explicit int literal, real literal, string literal, char literal, ’true’, ’false’, ’(’, ’init’, ’not’, ’+’, ’-’ or ’#’, but found ’,’"##]]);
}

// Deref exprs

#[test]
fn parse_deref_expr() {
    check(
        "_:=^a",
        expect![[r#"
            Root@0..5
              AssignStmt@0..5
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                DerefExpr@3..5
                  Caret@3..4 "^"
                  NameExpr@4..5
                    Name@4..5
                      Identifier@4..5 "a""#]],
    );
}

#[test]
fn nested_deref() {
    check(
        "_:=^ ^ ^ ^ ^ a",
        expect![[r#"
            Root@0..14
              AssignStmt@0..14
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                DerefExpr@3..14
                  Caret@3..4 "^"
                  Whitespace@4..5 " "
                  DerefExpr@5..14
                    Caret@5..6 "^"
                    Whitespace@6..7 " "
                    DerefExpr@7..14
                      Caret@7..8 "^"
                      Whitespace@8..9 " "
                      DerefExpr@9..14
                        Caret@9..10 "^"
                        Whitespace@10..11 " "
                        DerefExpr@11..14
                          Caret@11..12 "^"
                          Whitespace@12..13 " "
                          NameExpr@13..14
                            Name@13..14
                              Identifier@13..14 "a""#]],
    );
}

#[test]
fn deref_binds_higher_than_dot() {
    check(
        "_:=^a.b",
        expect![[r#"
            Root@0..7
              AssignStmt@0..7
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                FieldExpr@3..7
                  DerefExpr@3..5
                    Caret@3..4 "^"
                    NameExpr@4..5
                      Name@4..5
                        Identifier@4..5 "a"
                  Dot@5..6 "."
                  Name@6..7
                    Identifier@6..7 "b""#]],
    );
}

#[test]
fn deref_binds_higher_than_arrow() {
    check(
        "_:=^a.b",
        expect![[r#"
            Root@0..7
              AssignStmt@0..7
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                FieldExpr@3..7
                  DerefExpr@3..5
                    Caret@3..4 "^"
                    NameExpr@4..5
                      Name@4..5
                        Identifier@4..5 "a"
                  Dot@5..6 "."
                  Name@6..7
                    Identifier@6..7 "b""#]],
    );
}

#[test]
fn deref_binds_higher_than_call() {
    check(
        "_:=^a()",
        expect![[r#"
            Root@0..7
              AssignStmt@0..7
                NameExpr@0..1
                  Name@0..1
                    Identifier@0..1 "_"
                AsnOp@1..3
                  Assign@1..3 ":="
                CallExpr@3..7
                  DerefExpr@3..5
                    Caret@3..4 "^"
                    NameExpr@4..5
                      Name@4..5
                        Identifier@4..5 "a"
                  LeftParen@5..6 "("
                  ParamList@6..6
                  RightParen@6..7 ")""#]],
    );
}

#[test]
fn parse_init_expr() {
    check(
        "_:=init(1)",
        expect![[r#"
        Root@0..10
          AssignStmt@0..10
            NameExpr@0..1
              Name@0..1
                Identifier@0..1 "_"
            AsnOp@1..3
              Assign@1..3 ":="
            InitExpr@3..10
              KwInit@3..7 "init"
              LeftParen@7..8 "("
              LiteralExpr@8..9
                IntLiteral@8..9 "1"
              RightParen@9..10 ")""#]],
    );
}

#[test]
fn init_expr_multiple_exprs() {
    check(
        "_:=init(1, 2, 3)",
        expect![[r#"
        Root@0..16
          AssignStmt@0..16
            NameExpr@0..1
              Name@0..1
                Identifier@0..1 "_"
            AsnOp@1..3
              Assign@1..3 ":="
            InitExpr@3..16
              KwInit@3..7 "init"
              LeftParen@7..8 "("
              LiteralExpr@8..9
                IntLiteral@8..9 "1"
              Comma@9..10 ","
              Whitespace@10..11 " "
              LiteralExpr@11..12
                IntLiteral@11..12 "2"
              Comma@12..13 ","
              Whitespace@13..14 " "
              LiteralExpr@14..15
                IntLiteral@14..15 "3"
              RightParen@15..16 ")""#]],
    );
}

#[test]
fn recover_init_expr_missing_delimiter() {
    check(
        "_:=init(1, 2 3)",
        expect![[r#"
        Root@0..15
          AssignStmt@0..14
            NameExpr@0..1
              Name@0..1
                Identifier@0..1 "_"
            AsnOp@1..3
              Assign@1..3 ":="
            InitExpr@3..14
              KwInit@3..7 "init"
              LeftParen@7..8 "("
              LiteralExpr@8..9
                IntLiteral@8..9 "1"
              Comma@9..10 ","
              Whitespace@10..11 " "
              LiteralExpr@11..13
                IntLiteral@11..12 "2"
                Whitespace@12..13 " "
              Error@13..14
                IntLiteral@13..14 "3"
          Error@14..15
            RightParen@14..15 ")"
        error at 13..14: expected ’,’ or ’)’, but found int literal
        error at 14..15: expected ’var’, ’const’, ’type’, identifier, ’^’ or ’bits’, but found ’)’"#]],
    );
}

#[test]
fn recover_init_expr_missing_right_paren() {
    check(
        "_:=init(1, 2",
        expect![[r#"
        Root@0..12
          AssignStmt@0..12
            NameExpr@0..1
              Name@0..1
                Identifier@0..1 "_"
            AsnOp@1..3
              Assign@1..3 ":="
            InitExpr@3..12
              KwInit@3..7 "init"
              LeftParen@7..8 "("
              LiteralExpr@8..9
                IntLiteral@8..9 "1"
              Comma@9..10 ","
              Whitespace@10..11 " "
              LiteralExpr@11..12
                IntLiteral@11..12 "2"
        error at 11..12: expected ’,’ or ’)’"#]],
    );
}

#[test]
fn recover_init_expr_missing_left_paren() {
    check(
        "_:=init 1, 2",
        expect![[r##"
        Root@0..12
          AssignStmt@0..12
            NameExpr@0..1
              Name@0..1
                Identifier@0..1 "_"
            AsnOp@1..3
              Assign@1..3 ":="
            InitExpr@3..12
              KwInit@3..7 "init"
              Whitespace@7..8 " "
              Error@8..9
                IntLiteral@8..9 "1"
              Error@9..11
                Comma@9..10 ","
                Whitespace@10..11 " "
              Error@11..12
                IntLiteral@11..12 "2"
        error at 8..9: expected ’(’, but found int literal
        error at 9..10: expected identifier, ’^’, ’bits’, int literal, explicit int literal, real literal, string literal, char literal, ’true’, ’false’, ’(’, ’init’, ’not’, ’+’, ’-’ or ’#’, but found ’,’
        error at 11..12: expected ’,’ or ’)’, but found int literal"##]],
    );
}

#[test]
fn recover_init_expr_empty() {
    check(
        "_:=init()",
        expect![[r##"
        Root@0..9
          AssignStmt@0..9
            NameExpr@0..1
              Name@0..1
                Identifier@0..1 "_"
            AsnOp@1..3
              Assign@1..3 ":="
            InitExpr@3..9
              KwInit@3..7 "init"
              LeftParen@7..8 "("
              RightParen@8..9 ")"
        error at 8..9: expected identifier, ’^’, ’bits’, int literal, explicit int literal, real literal, string literal, char literal, ’true’, ’false’, ’(’, ’init’, ’not’, ’+’, ’-’ or ’#’, but found ’)’"##]],
    );
}
